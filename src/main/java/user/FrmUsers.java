package user;

import java.util.List;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import main.Context;
import main.Message;

public class FrmUsers extends javax.swing.JDialog {

    List<User> _users = null;
    int _id = -1;

    /**
     * Creates new form FrmUsers
     *
     * @param parent
     * @param modal
     */
    public FrmUsers(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setTitle("Usuarios");
        this.setLocationRelativeTo(null);

        // add table listener selection
        ListSelectionModel selectionModel = table.getSelectionModel();
        selectionModel.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent evt) {
                // evt not used
                _tableSelectionEvent();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        pnlLeft = new javax.swing.JPanel();
        pnlTopList = new javax.swing.JPanel();
        btnInsert = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        barList = new javax.swing.JPanel();
        lblCount = new javax.swing.JLabel();
        pnlRight = new javax.swing.JPanel();
        pnlTopFields = new javax.swing.JPanel();
        btnCancel = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        barFields = new javax.swing.JPanel();
        lblStatus = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        lblPass = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtPass = new javax.swing.JTextField();
        lblConfirm = new javax.swing.JLabel();
        txtConfirm = new javax.swing.JTextField();
        lblTipPass = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jSplitPane1.setDividerLocation(250);
        jSplitPane1.setDividerSize(5);

        pnlTopList.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btnInsert.setText("Nuevo");
        btnInsert.setName("insert"); // NOI18N
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActionPerformed(evt);
            }
        });

        btnDelete.setText("Eliminar");
        btnDelete.setToolTipText("Eliminar usuario seleccionado");
        btnDelete.setName("delete"); // NOI18N
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpdate.setText("Editar");
        btnUpdate.setName("update"); // NOI18N
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlTopListLayout = new javax.swing.GroupLayout(pnlTopList);
        pnlTopList.setLayout(pnlTopListLayout);
        pnlTopListLayout.setHorizontalGroup(
            pnlTopListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTopListLayout.createSequentialGroup()
                .addComponent(btnInsert)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDelete)
                .addContainerGap(33, Short.MAX_VALUE))
        );
        pnlTopListLayout.setVerticalGroup(
            pnlTopListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlTopListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(btnInsert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnUpdate))
        );

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Usuario", "Adminiatrador"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table);

        barList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout barListLayout = new javax.swing.GroupLayout(barList);
        barList.setLayout(barListLayout);
        barListLayout.setHorizontalGroup(
            barListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(barListLayout.createSequentialGroup()
                .addComponent(lblCount, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 75, Short.MAX_VALUE))
        );
        barListLayout.setVerticalGroup(
            barListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblCount, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout pnlLeftLayout = new javax.swing.GroupLayout(pnlLeft);
        pnlLeft.setLayout(pnlLeftLayout);
        pnlLeftLayout.setHorizontalGroup(
            pnlLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLeftLayout.createSequentialGroup()
                .addGroup(pnlLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlTopList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(barList, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlLeftLayout.setVerticalGroup(
            pnlLeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlLeftLayout.createSequentialGroup()
                .addComponent(pnlTopList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(barList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jSplitPane1.setLeftComponent(pnlLeft);

        pnlTopFields.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        btnCancel.setText("Cancelar");
        btnCancel.setName("cancel"); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActionPerformed(evt);
            }
        });

        btnSave.setText("Guardar");
        btnSave.setName("save"); // NOI18N
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlTopFieldsLayout = new javax.swing.GroupLayout(pnlTopFields);
        pnlTopFields.setLayout(pnlTopFieldsLayout);
        pnlTopFieldsLayout.setHorizontalGroup(
            pnlTopFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTopFieldsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnCancel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSave)
                .addContainerGap(95, Short.MAX_VALUE))
        );
        pnlTopFieldsLayout.setVerticalGroup(
            pnlTopFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTopFieldsLayout.createSequentialGroup()
                .addGroup(pnlTopFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnSave))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        barFields.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout barFieldsLayout = new javax.swing.GroupLayout(barFields);
        barFields.setLayout(barFieldsLayout);
        barFieldsLayout.setHorizontalGroup(
            barFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(barFieldsLayout.createSequentialGroup()
                .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        barFieldsLayout.setVerticalGroup(
            barFieldsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        lblName.setText("Nombre");

        lblPass.setText("Contraseña");

        lblConfirm.setText("Confirmar contraseña");

        lblTipPass.setText("(Dejar vacia si no desea cambiarla)");

        javax.swing.GroupLayout pnlRightLayout = new javax.swing.GroupLayout(pnlRight);
        pnlRight.setLayout(pnlRightLayout);
        pnlRightLayout.setHorizontalGroup(
            pnlRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlTopFields, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(barFields, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnlRightLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlRightLayout.createSequentialGroup()
                        .addGroup(pnlRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlRightLayout.createSequentialGroup()
                                .addGap(75, 75, 75)
                                .addComponent(lblName))
                            .addComponent(lblPass, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPass, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlRightLayout.createSequentialGroup()
                        .addComponent(lblConfirm)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblTipPass, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlRightLayout.setVerticalGroup(
            pnlRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRightLayout.createSequentialGroup()
                .addComponent(pnlTopFields, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(pnlRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPass)
                    .addComponent(txtPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlRightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblConfirm)
                    .addComponent(txtConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTipPass)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 180, Short.MAX_VALUE)
                .addComponent(barFields, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jSplitPane1.setRightComponent(pnlRight);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 520, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void _clearFields() {
        txtName.setText("");
        txtPass.setText("");
    }

    private void _loadFields() {
        if (table.getRowCount() > 0) {
            int i = table.getSelectedRow();
            txtName.setText(_users.get(i).name);
            //txtPass.setText(_users.get(i).pass);
        } else {
            _clearFields();
        }
    }

    private void _tableSelectionEvent() {
        System.out.println("RowIndex: " + table.getSelectedRow());
        _loadFields();
    }

    private void _loadUsers() {
        _loadUsers(-1);
    }

    private void _loadUsers(int idSelect) {
        _users = User.getAll();

        // clean table & not editable & type-data of column
        String[] titles = new String[]{
            "Usuario",
            "Administrador"
        };
        Class[] types = new Class[]{
            java.lang.String.class, // name
            java.lang.Boolean.class // isAdmin
        };
        boolean[] canEdit = new boolean[]{
            false, // name
            false // isAdmin
        };
        var tableModel = new DefaultTableModel(null, titles) {
            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        };
        table.setModel(tableModel);

        int i = 0;
        for (User user : _users) {
            System.out.println(user);
            var row = new Object[]{
                user.name,
                true
            };
            tableModel.addRow(row);

            // select if equals id
            if (user.id == idSelect) {
                table.setRowSelectionInterval(i, i); // (from, to)
            }
            i++;
        }
        // select first row if not selected
        if (table.getSelectedRow() == -1) {
            table.setRowSelectionInterval(0, 0);
        }

        // show count
        String txt = " " + _users.size() + " usuario";
        if (_users.size() != 1) {
            txt += "s";
        }
        lblCount.setText(txt);
    }

    private void btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActionPerformed
        String btnName = ((JButton) evt.getSource()).getName();
        boolean isEditing = btnName.equals("insert") || btnName.equals("update");

        // if save: validate
        if (btnName.equals("save")) {
            if (txtName.getText().isEmpty()) {
                txtName.requestFocus();
                //var ballonTip = new BalloonTip(txtName, "Tooltip msg", false);
                //ballonTip.setVisible(true);
                //ToolTipUtils.balloonToToolTip(new BalloonTip(txtName, "Tooltip msg"), 100, 100);
                return;
            }

            // verify name not repeated
            if (User.isExists(txtName.getText(), _id)) {
                txtName.requestFocus();
                return;
            }

            // if insert verify pass not empty
            if (_id == -1) {
                if (txtPass.getText().isEmpty()) {
                    txtPass.requestFocus();
                    return;
                }
            }
            
            // verify if pass & confirm differ
            if (!txtPass.getText().equals(txtConfirm.getText())) {
                txtConfirm.setText("");
                txtConfirm.requestFocus();
                return;
            }
        }

        // cancel | save
        if (!isEditing) {
            // cancel
            if (btnName.equals("cancel")) {
                _loadFields();
            } // save
            else {
                User user = new User(
                        _id,
                        txtName.getText(),
                        txtPass.getText()
                );
                if (_id == -1) {
                    user.id = User.insert(user);
                } else {
                    User.update(user);
                }

                _loadUsers(user.id);
            }
            lblStatus.setText(" Observando usuario seleccionado");
        }

        // enable-disable components
        pnlTopList.setVisible(!isEditing);
        table.setEnabled(!isEditing);
        pnlTopFields.setVisible(isEditing);
        txtName.setEnabled(isEditing);
        lblPass.setVisible(isEditing);
        txtPass.setVisible(isEditing);
        lblConfirm.setVisible(isEditing);
        txtConfirm.setVisible(isEditing);
        lblTipPass.setVisible(isEditing);

        if (!isEditing) {
            txtPass.setText("");
            txtConfirm.setText("");
            table.requestFocus();
        }
        
        // insert | update
        if (isEditing) {
            if (btnName.equals("insert")) {
                _id = -1;
                _clearFields();
                lblStatus.setText(" Agregando nuevo usuario");
            } else {
                _id = _users.get(table.getSelectedRow()).id;
                lblStatus.setText(" Modificando usuario seleccionado");
            }
            txtName.requestFocus();
        }
    }//GEN-LAST:event_btnActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        _loadUsers();
        btnCancel.doClick();
    }//GEN-LAST:event_formWindowOpened

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int i = table.getSelectedRow();
        int id = _users.get(i).id;
        if (id == 0) {
            Message.showError("No se permite eliminar al super-admin");
            return;
        }
        if (id == Context.user.id) {
            Message.showError("No se permite auto-eliminarse");
            return;
        }
        if (Message.showDeleteConfirmation("usuario") == JOptionPane.YES_OPTION) {
            User.delete(id);

            // get id to select
            if (i < _users.size() - 1) {
                // take next id
                id = _users.get(i + 1).id;
            } else {
                id = _users.get(i - 1).id;
            }

            _loadUsers(id);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel barFields;
    private javax.swing.JPanel barList;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel lblConfirm;
    private javax.swing.JLabel lblCount;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPass;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTipPass;
    private javax.swing.JPanel pnlLeft;
    private javax.swing.JPanel pnlRight;
    private javax.swing.JPanel pnlTopFields;
    private javax.swing.JPanel pnlTopList;
    private javax.swing.JTable table;
    private javax.swing.JTextField txtConfirm;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPass;
    // End of variables declaration//GEN-END:variables
}
